.. _volume_processing:

Volume processing
*****************

The main usage of pyhrf is made up of 4 steps:

   1. :ref:`Build a parcellation <parcellation>`
   2. :ref:`Configure a pyhrf treatment <treatment_setup>`
   3. :ref:`Run a pyhrf treatment <running>`
   4. :ref:`Visualize the results of a pyhrf treatment <viewer>`

The following procedure provides details on how to apply the Joint Detection Estimation (JDE) algorithm to fMRI data.

.. _parcellation:

Parcellation
============

The default processing already refers to a parcellation data file which corresponds to bilateral auditory cortices. In this respect, the first way to create a parcellation is to defined a n-ary mask of ROIs (one integer per ROI, 0 is the background) which can be generated by the `marsbar <http://marsbar.sourceforge.net/>`_ SPM toolbox.

PyHRF also provides alternatives to make a functional parcellation (Ward algorithm, balance partitioning). In the following, the parcellation file is referred to as the mask file, and the treatment will be iteratively performed over each and every parcel in an independent manner.  

.. _treatment_setup:

Treatment configuration
=======================

The minimal information needed by a Pyhrf treatment for single session (or run) data is: 

* the BOLD data file in NIFTI format, concatenated over all scan volumes, ie 3D+time.
* a parcellation NIFTI file which is a 3D volume of labels defining the ROIs.
* a set of stimulus names or experimental conditions associated with onset sequences. 

These inputs are gathered in an XML configuration file. 
A template of such file can be generated by running the follwing command line::

            pyhrf_jde_buildcfg -e

A file detectestim.xml is then created. By default, it contains the definition of a treatment over test data (provided with the Pyhrf distribution for ease of demonstration). Such data have been acquired a long time ago during a fast event-related design known as the Localizer protocol (Pinel et al, BMC Neurosci 2007). It serves as example to build a customized treatment. 

To edit this file, you can use the XML editor::

   pyhrf_xmledit detecestim.xml

The **fmri_data** section comprises: all fMRI data (**sessions_data** ie, possibly multiple sessions), the time of repetition (**tr**) and the mask file (**mask_file**). 
Within **sessions_data**, each numbered child tag stands for a single session. By default only one session is present, indexed by **i0**. If you have to append other sessions, index them by *i1*, *i2*, and so on. Down one level, the definition of one session is made of:

    * **onsets**, which stores the stimulus arrival times of experimental conditions. Every label of experimental condition must be unique. The sequence associated with each condition is the set of arrival times in seconds, separated by one space delimiter.
    * **durations**, which must be consistent with the above mentioned **onsets** defition and define the durations of stimuli in seconds. If empty, then peaked stimuli or events (duration=0) are considered.
    * **bold_file**, which indicates the location of the 3D+time BOLD data file. Supported formats: NIFTI, ANALYSE.

Following **fmri_data**, there are two other important parameters which are common to all sessions:

    * **tr** is the time of repetition expressed in seconds.
    * **mask_file**, which indicates the location of the mask file: a volume of labels (integers) where 0 is the background. This file can be either the result from any parcellation technique or simply a binary mask resulting for instance from thresholding an binarizing a statistical map.

The following **analyser** section groups all parameters for the actual analysis. 
The contrasts have to be defined in **analyser/sampler/responseLevels/contrasts**.
Note that the condition labels must be consistent with those entered in the data definition part. See contextual comments within the xml for more information on other parameters.
The estimation of the hemodynamics can be setup by changing parameter "do_sampling". If set to "True" then the response function is estimated, otherwise if it is set to "False" then it is fixed to the canonical HRF (the same as in SPM).

.. _running:

Treatment execution
===================

To run the pyhrf treatment defined in detectestim.xml, type::

   pyhrf_jde_estim -v1

Here -v1 stands for the level of verbosity (from 0: quiet, up to 6: everything - for debugging purpose)

Result output files
-------------------
The main outputs (NIFTI format) are written in the current directory by default (or the directory specified in detectestim.xml, see **sampler/output_dir**):

    * **Contrast maps**: contrast maps are generated with the following file names: jde_vem_nrls_contrasts_<contrast_name>.nii. Their corresponding standard deviations are stored in files like jde_vem_nrls_contrasts_std_<contrast_name>.nii. Last, normalized contrasts are stored in files jde_vem_nrls_ncontrasts_<contrast_name>.nii
    * **Response levels maps**: for each experimental condition, estimated effect sizes (or neural response levels) are stored in files of the form: jde_vem_nrl_pm_condition_<condition_name>.nii
    * **Hemodynamic responses**: to each voxel, the product a*h is computed and stored in jde_vem_ah.nii. Note that one HRF shape is common to all conditions, but its magnitude varies from one voxel to another for a given condition and from one to condition to another in the same position.

.. _viewer:

Result visualization 
====================

The pyhrf viewer is called with NIFTI volumes as inputs. To view all the results within the JDE output directory, run::

    pyhrf_view *nii
